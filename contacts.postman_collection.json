{
	"info": {
		"_postman_id": "5f2136e5-a62c-483a-ae73-cb5c2ce425ab",
		"name": "Contact Book API Requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25754968"
	},
	"item": [
		{
			"name": "Save a new contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should save a valid contact', ()=> {\r",
							"    pm.response.to.have.status(201)\r",
							"    const response = pm.response.json()\r",
							"    const { contact } = response\r",
							"    pm.expect(contact._id).to.not.null\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{contactName}}\",\r\n    \"email\": \"ryannnetorezer@gmail.com\",\r\n    \"phone\": \"(99) 99999-9999\",\r\n    \"birthday\": \"2002-12-11\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/contacts",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save a new contact with invalid name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should not save a contact with invalid name', ()=> {\r",
							"    pm.response.to.have.status(400)\r",
							"    const response = pm.response.json()\r",
							"    const { errorMessages} = response\r",
							"    pm.expect(errorMessages[0]).to.equal('Name cannot be empty')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"\",\r\n    \"email\": \"ryannnetorezer@gmail.com\",\r\n    \"phone\": \"(99) 99999-9999\",\r\n    \"birthday\": \"2002-12-11\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/contacts",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save a new contact with invalid email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should not save a contact with invalid email', ()=> {\r",
							"    pm.response.to.have.status(400)\r",
							"    const response = pm.response.json()\r",
							"    const { errorMessages} = response\r",
							"    pm.expect(errorMessages[0]).to.equal('Invalid email')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ryan Matheus\",\r\n    \"email\": \"ryannnetorezergmail.com\",\r\n    \"phone\": \"(99) 99999-9999\",\r\n    \"birthday\": \"2002-12-11\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/contacts",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save a new contact invalid phone",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should not save a contact with invalid phone', ()=> {\r",
							"    pm.response.to.have.status(400)\r",
							"    const response = pm.response.json()\r",
							"    const { errorMessages} = response\r",
							"    pm.expect(errorMessages[0]).to.equal('Phone must have following pattern: (00) 00000-0000')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ryan Matheus\",\r\n    \"email\": \"ryannnetorezer@gmail.com\",\r\n    \"phone\": \"(99) 999999999\",\r\n    \"birthday\": \"2002-12-11\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/contacts",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save a new contact with invalid birthday",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should not save a contact with invalid birthday', ()=> {\r",
							"    pm.response.to.have.status(400)\r",
							"    const response = pm.response.json()\r",
							"    const { errorMessages} = response\r",
							"    pm.expect(errorMessages[0]).to.equal('O aniversÃ¡rio deve ser anterior a hoje')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ryan Matheus\",\r\n    \"email\": \"ryannnetorezer@gmail.com\",\r\n    \"phone\": \"(99) 99999-9999\",\r\n    \"birthday\": \"2025-12-11\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/contacts",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find contacts by name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('should retrieve correct contacts', () =>{\r",
							"    pm.response.to.have.status(200)\r",
							"    const response = pm.response.json()\r",
							"    const {contacts} = response\r",
							"    pm.expect(contacts.length).to.greaterThan(0)\r",
							"    const contactName = pm.collectionVariables.get('contactName')\r",
							"    const contact = contacts[0]\r",
							"    const verification =   contact.name.toLowerCase().includes(contactName.toLowerCase())\r",
							"    pm.expect(verification).to.equal(true)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/contacts/name/{{contactName}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"contacts",
						"name",
						"{{contactName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find contatcs by name substring",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('should retrieve correct contacts', () =>{\r",
							"    pm.response.to.have.status(200)\r",
							"    const response = pm.response.json()\r",
							"    const {contacts} = response\r",
							"    pm.expect(contacts.length).to.greaterThan(0)\r",
							"    const contactName = pm.collectionVariables.get('contactNameSubStr')\r",
							"    const contact = contacts[0]\r",
							"    const verification =   contact.name.toLowerCase().includes(contactName.toLowerCase())\r",
							"    pm.expect(verification).to.equal(true)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/contacts/name/{{contactNameSubStr}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"contacts",
						"name",
						"{{contactNameSubStr}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find contacts by bithday period",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('should retrieve contacts by birthday period', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"    const response = pm.response.json()\r",
							"    const {contacts} = response\r",
							"    pm.expect(contacts.length).to.greaterThan(0)\r",
							"    const start = pm.collectionVariables.get('startDate')\r",
							"    const end = pm.collectionVariables.get('endDate')\r",
							"    const startDate = new Date(start) \r",
							"    const endDate = new Date(end)\r",
							"\r",
							"    contacts.forEach((c)=>{\r",
							"        const { birthday } = c\r",
							"        const birthdayDate = new Date(birthday)\r",
							"        const verification = birthdayDate >= startDate && birthdayDate <= endDate\r",
							"        pm.expect(verification).to.equal(true)\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/contacts/birthday?start={{startDate}}&end={{endDate}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"contacts",
						"birthday"
					],
					"query": [
						{
							"key": "start",
							"value": "{{startDate}}"
						},
						{
							"key": "end",
							"value": "{{endDate}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Find contacts with birthday periodo start date greater than end date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('should not retrieve contacts when start date is greater than and date', ()=>{\r",
							"    pm.response.to.have.status(400)\r",
							"    const response = pm.response.json()\r",
							"    const { errorMessages } = response\r",
							"    const message = errorMessages[0]\r",
							"    pm.expect(message).to.equal('Start date cannot be greater than end date')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/contacts/birthday?start={{endDate}}&end={{startDate}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"contacts",
						"birthday"
					],
					"query": [
						{
							"key": "start",
							"value": "{{endDate}}"
						},
						{
							"key": "end",
							"value": "{{startDate}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Find contacts by invalid birthday format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('deve retornar que o formato da data esta incorreta', ()=> {\r",
							"    pm.response.to.have.status(400)\r",
							"    const response = pm.response.json()\r",
							"    const { errorMessages} = response\r",
							"    pm.expect(errorMessages[0]).to.equal('Invalid date format')\r",
							"\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/contacts/birthday?start={{StartDate}}&end={{EndDate}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"contacts",
						"birthday"
					],
					"query": [
						{
							"key": "start",
							"value": "{{StartDate}}"
						},
						{
							"key": "end",
							"value": "{{EndDate}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Find contact by email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('deve retornar email', ()=> {\r",
							"    pm.response.to.have.status(200)\r",
							"    const response = pm.response.json()\r",
							"    const {contact} = response\r",
							"    pm.expect(contact._id).not.equal(null)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/contacts/email/{{contactEmail}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"contacts",
						"email",
						"{{contactEmail}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:3001",
			"type": "string"
		},
		{
			"key": "contactName",
			"value": "Ryan Matheus",
			"type": "string"
		},
		{
			"key": "contactNameSubStr",
			"value": "ATH",
			"type": "string"
		},
		{
			"key": "startDate",
			"value": "1990-01-01",
			"type": "string"
		},
		{
			"key": "endDate",
			"value": "2010-11-11",
			"type": "string"
		},
		{
			"key": "StartDate",
			"value": "20001-12-32",
			"type": "string"
		},
		{
			"key": "EndDate",
			"value": "2022-13-31",
			"type": "string"
		},
		{
			"key": "contactEmail",
			"value": "ryannnetorezer@gmail.com",
			"type": "string"
		}
	]
}